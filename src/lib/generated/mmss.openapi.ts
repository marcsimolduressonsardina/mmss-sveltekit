/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/orders/{id}': {
		get: {};
		delete: {};
	};
	'/orders/{id}/print': {
		get: {};
	};
	'/orders/{id}/items': {
		get: {};
		post: {};
	};
	'/orders/{id}/items/{id}': {
		get: {};
		put: {};
		delete: {};
	};
	'/customers': {
		post: {};
	};
	'/customers/search': {
		post: {};
	};
	'/customers/{id}': {
		get: {};
	};
	'/customers/{id}/orders': {
		get: {};
		post: {};
	};
}

export type webhooks = Record<string, never>;

export interface components {
	schemas: {
		Order: {
			id: string;
			customer: components['schemas']['Customer'];
			storeId: string;
			/** Format: date-time */
			createdAt: string;
			user: components['schemas']['User'];
			observations?: string;
		};
		Item: {
			id: string;
			orderId: string;
			moldingId: string;
			/** Format: double */
			width: number;
			/** Format: double */
			height: number;
			passePartoutId?: string;
			/** Format: double */
			passePartoutWidth: number;
			/** Format: double */
			passePartoutHeight: number;
			glassId?: string;
			backId?: string;
			description: string;
			observations: string;
			quantity: number;
			isFabric?: boolean;
			/** Format: date-time */
			createdAt: string;
		};
		CalculatedItem: {
			itemId: string;
			/** Format: double */
			discount: number;
			parts: components['schemas']['CalculatedItemPart'][];
			total: number;
		};
		ItemResponse: {
			item: components['schemas']['Item'];
			calculatedItem?: components['schemas']['CalculatedItem'];
		};
		Customer: {
			id: string;
			storeId: string;
			name: string;
			phone: string;
			/** Format: date-time */
			created_at?: string;
		};
		User: {
			id: string;
			storeId: string;
			name: string;
		};
		CalculatedItemPart: {
			/** Format: double */
			price: number;
			quantity: number;
			description: string;
			log?: string;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
